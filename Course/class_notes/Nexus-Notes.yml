How we maintain a Fault tolerant Architecture / Infrastructure:
by Deploying a Highly available Architecture / Infrastructure:

Example of Artifacts:
    Nexus
    JFrog 
    AWScodeArtifact 
Software Developing Lifecycle

Coding: 
  Git for versioning 
  GitHub/GitLab/Bitbucket as a SCM tool 

Build: 
  Maven to create artifacts (deployable packages) that is deployed to a 
  webserver (Tomcat/JBoss). This web servers interprets and Runs JUnitTest 
  cases written by developers 

Test: 
Sonarqube performs code quality analysis on artifacts 

Deploy: 
Artifacts can be deployed into webservers or stored in artifactory like (Nexus or JFrog)

Maven Lifecycle:
    1.  clean Lifecycle 
       mvn clean  --- delete old artifacts
    2.  site/swagger Lifecycle
       site --- Create java classes 
    3.  default Lifecycle
        mvn validate 
        mvn compile 
        mvn test 
        mvn package (target/*war, app.war. app.jar, app.ear)
        mvn install 
            (target/*war, app.war. app.jar, app.ear)
            (MHD/*war, app.war. app.jar, app.ear)
    4.  Sonar Lifecycle
        mvn sonar:sonar 
            sonar = plugin
            sonar = goal
    5.  Artifactory Lifecycle
        mvn deploy = Uploads artifacts to Nexus 

mvn package  
  Artifacts = 1: 
    maven = jar, war or ear 

mvn deploy
  Artifacts = 2: 
    maven = jar, war or ear 
    nexus = jar, war or ear 

1. Why do we deploy artifacts into Nexus ?
2. What happens when packages can't be access because the build server is down?

Disaster management:
We need to create backups for artifacts in artifactories to recover builds in case of a disaster 

Artifactory Repository:
  maven Repository   [jar/war/ear]
  yum Repository     [yum packages] 
  NodeJs Repository  [node packages] 
  apt Repository     [apt packages]

-----
IQ: How do you use Nexus in your environment?

Nexus: Is an Open source Artifactory Repository
       It is used to store and retrieve build artifacts
       We can retrieve artifacts when needed
       Nexus acts as a Disaster recovery server for maven    

JFrog: Is an  Artifactory Repository - Licence
       It is used to store and retrieve build artifacts 

Amazon CodeArtifacts:
     It is used to store and retrieve build artifacts 

We support Java based application dev't.

maven goals:
 mvn package  
    Creates artifacts in the target directory
 mvn install 
   Creates and store artifacts in maven-local-repo & target directory

 what is the difference between target and /target dir?? :
    target is a normal   
    /target is a root directory

    app is a normal          = mkdir app   
    /app is a root directory = mkdir /app 
    mkdir 

 what is the difference between mkdir dirName and sudo mkdir /dirName  
   mkdir app [this create app dir in your PWD] 
   mkdir /app [this create app dir in your the root dir]  

mvn deploy: uploads the build artifacts to maven remote repository (nexus)
    - validate
    - compile
    - test
    - create package in target directory
    - Packages created in mavenlocalrepo   
    - uploads THE PACKAGE to Nexus (Maven remote-repo)

IQ: How do your developers connect with your SCM repos in GitHub?
 via authentication: ssh or PAT 
  git push alaisName branchName  

IQ: How DOES MAVEN connect with SonarQube?
    MODIFY THE   <properties> <properties/> in pom.xml  
    by adding sonarqube server IPaddress and login credentials 


How will MAVEN connect with nexus?
maven and nexus intergration: 

nexus Installation:
-------------
 https://www.sonatype.com/download-oss-sonatype

PUBLIC-IP = 52.53.227.31  
privateIP = 172.31.27.43

 echo  'run_as_user="nexus" ' >> /opt/nexus/bin/nexus.rc
 echo  'run_as_user="nexus" ' > /opt/nexus/bin/nexus.rc

http://52.53.227.31:8081/  
  userName = admin 
  password= admin123

Nexus Home directory:
  /opt/nexus 
    bin  = binary files   
    lib  = 
    etc  = configuration files  
     cat nexus/etc/nexus-default.properties   
     application-port=8081
     application-host=0.0.0.0
     nexus-context-path=/

     application-port=8191
     application-host=0.0.0.0
     nexus-context-path=/unitedcore

  /opt/sonatype-work  

http://52.53.227.31:8081/ 
http://52.53.227.31:8191/unitedcore   
http://52.53.227.31:8191/unitedcore/

Fintech:
 1. clone the code 
 2. maven clean package = build artifacts 
 3. codeQuality with sonarqube
 4. upload artifacts into Nexus 
      Created a nexus server 
      configure the serve  
      Intergrating Maven with nexus 
fintech client  

Maven SonarQube Integration:  mvn sonar:sonar
   54.236.232.85
   172.31.0.41
   PORT = 9000
 1. vi pom.xml and check for "properties" tag
mvn package  

Maven Nexus Integration:
sonarqube vs sonacloud
---->        
Databases 
  H2DB  
  PostgreSql   
Rules  

11:45AM - 2:45PM 
================
  COMPLETING  
========================================================
1. SonarQube is use to perform static code analysis 
  SonarQube is use to perform code quality analysis for  
  projects  

One speaks of experience:
2. We use SonarQube to perform static code quality analysis for    
   our prjects    
SDLC =:
  develop, build and deploy  

SonarQube Scanner and 
SonarQube server:
   Compute engine  
   elasticsearch  
   Database 
   web-server = serverIP:portNumber[9000] 
              = userName/Password 
              = token     

Benchmark = Our standards for quality Software:
Quality Profiles    
Rules
Quality GATE:
  Conditions   
1. Code coverage     > 85%  
2. Duplicated lines  < 4%       
3. vulnerabilities   < 1
4. code smells       < 5 
5. bugs              = 0
6. Security hotspots = 0
7. USE BEST RECOMMENDED CODING STANDARDS  
=============================================
Nexus

What can be done if the packages are deleted IN MAVEN?
What can be done if the packages can't be access 
because the build server is down?

Disaster recovery:
Disaster management:
  We need to create backups for artifacts in artifactories
Coding:
  Local computers (Laptops) 
  What will happened if a developers laptop or env't breakdowns 
  developers commits changes in code in their local Repository 
  developers push their commits to the remote Repository in GitHub
  GIT = DVCS  

yum install tree git  
choco install tree git 
apt install tree    
Examples of artifacts:
Artifactory Repository    packages                      :
  maven Repository       [jar/war/ear] 
  NodeJs Repository      [npm, node packages ]
  yum   Repository       [ yum packages]
  chocolatey repo.       [choco packages]
  apt  Repository        [ apt packages]
  docker
  terraform  

artifacts to be created depends on the project's language:
  java   --> app.jar, maven-web-app.war, boa.ear 
             app.[jar/war/ear]

  docker -->   Docker Image 
               docker build
               docker run 
  NodeJs  -- > NPM Packages = node package manager
  yum --- > yum Packages  =  
            yum install maven git httpd tree
            yum is a package manager for Redhat and CentOS  
  
       yum install maven

  apt  -->  apt install tree 
            apt is a package manager for Ubuntu/Debian linux servers

  chocolatey --> choco install terraform 
             --> chocolatey is a package manager for windows OS  

  brew:     brew install terraform    
         --> brew is a package manager for mac OS  
  
  helm-->  is a package manager for kubernetes

  pip --> is a is a package manager for python 
===============
-----
IQ: How have you applied Nexus in your environment?
    1. Installation and configuration of the nexus server in Redhat.  
    2. Creating maven-remote-repos[artifactories] in nexus   
    3. uploading java, NodeJs, etc. artifacts into Nexus
    5. retrieving packages from Nexus
    4. Securing the nexus server   
    5. troubleshooting build and uploading related issues  

IQ: what is your experience with nexus?
    What problems have you encountered with Nexus and how did you   
    resolve it  .

Nexus: Is an Open source Artifactory Repository
       It is used to store and retrieve build artifacts
       We can retrieve artifacts when needed
       Nexus acts as a Disaster recovery server for maven    

JFrog: Is an  Artifactory Repository - Licence
       It is used to store and retrieve build artifacts 

Amazon CodeArtifacts:
     It is used to store and retrieve build artifacts 

We support Java based application dev't.
maven goals:
 mvn package  
    This will validate, compile, test and Creates
    artifacts in the target directory
 mvn install 
   Creates and store artifacts in maven-local-repo & target directory

mvn deploy: uploads the build artifacts to maven remote repository (nexus)
    - validate
    - compile
    - test
    - create package in target directory
    - Packages created in mavenlocalrepo   
    - uploads THE PACKAGE to Nexus (Maven remote-repo)

How will MAVEN connect with nexus?
maven and nexus intergration: 

nexus Installation:
-------------
 https://www.sonatype.com/download-oss-sonatype
   PUBLIC-IP = 54.85.4.8
   ssh-key   = class30key.pem  
   userName  = ec2-user  
   ssh -i class30key.pem  ec2-user@54.85.4.8                 = RP  
   ssh -i /home/ec2-user/class30key.pem  ec2-user@54.85.4.8  = AP  
   ssh -i /tmp/class30key.pem  ec2-user@54.85.4.8 

 http://54.85.4.8:8081/

 echo  'run_as_user="nexus" ' > /opt/nexus/bin/nexus.rc
 echo  'run_as_user="nexus" ' > /opt/nexus/bin/nexus.rc

http://54.85.4.8:8081/  
default nexus login:
  userName = admin 
  password=admin123

Nexus Home directory:
  /opt/nexus 
    bin  = binary files [nexus]   
    lib  = 
    etc  = configuration files
             nexus-default.properties  

# Jetty section
application-port=8081
application-host=0.0.0.0
nexus-args=${jetty.etc}/jetty.xml,${jetty.etc}/jetty-http.xml,${jetty.etc}/jetty-requestlog.xml
nexus-context-path=/


   http://54.85.4.8:8081/

http://54.85.4.8:8081/unitedcore   

http://54.85.4.8:8181/unitedcore     

http://54.85.4.8:8081/
 



maven-remote-repo:  
  Repourl = http://54.85.4.8:8181/unitedcore/repository/tesla-snapshots/
  Repourl = http://54.85.4.8:8181/unitedcore/repository/tesla-releases/

  snapshots-repos/
  releases-repos/

maven, nexus integration: 
  1. Create artifactories[maven-remote-repos] and add them in the  
     distributionMGT tag in pom.xml 

     <url>http://54.85.4.8:8181/unitedcore/repository/tesla-releases/</url>
     <url>http://54.85.4.8:8181/unitedcore/repository/tesla-snapshots/</url>

      Connect to 52.53.227.31:8191 [/52.53.227.31] failed: 
      status: 400 Repository version policy:
      status: 400 Repository version policy:
      status: 401 Unauthorized -- authentication failed
      400 Repository does not allow updating assets: tesla-releases
  <name>unitedcore Technologies Snapshot Nexus Repository </name>
  <url>http://54.85.4.8:8181/unitedcore/repository/tesla-releases/</url>


  2. Configure nexus login credentials in settings.xml file in the  
     conf directory in the maven server  
           userName = admin 
           password= admin@123

   <server>
      <id>nexus</id>
      <username>admin</username>
      <password>admin@123</password>
    </server>


com/mt/maven-web-application/0.0.3-SNAPSHOT/maven-web-application-0.0.3-20221211.225747-2.war

Who decides on codeQuality:
===========================
Code Quality is generally a Team decision =   
Sprint planning meeting  
1. 25 rules --- Quality Profiles = javaAppQP    
2. Conditions -- Quality GATE = 
   code coverage => 90%


Is nexus built from a different env't  :
  We leverage aws cloud  servers = AZ  
  us-east-1  = NV [AZ1 , ... AZ6]  

  What’s the difference between code coverage and code quality






